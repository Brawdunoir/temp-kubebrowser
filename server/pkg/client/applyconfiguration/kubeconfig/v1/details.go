/*
Copyright Yann Lacroix.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// DetailsApplyConfiguration represents a declarative configuration of the Details type for use
// with apply.
type DetailsApplyConfiguration struct {
	Server                   *string `json:"server,omitempty"`
	CertificateAuthorityData *string `json:"certificate-authority-data,omitempty"`
	InsecureSkipTLSVerify    *bool   `json:"insecure-skip-tls-verify,omitempty"`
}

// DetailsApplyConfiguration constructs a declarative configuration of the Details type for use with
// apply.
func Details() *DetailsApplyConfiguration {
	return &DetailsApplyConfiguration{}
}

// WithServer sets the Server field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Server field is set to the value of the last call.
func (b *DetailsApplyConfiguration) WithServer(value string) *DetailsApplyConfiguration {
	b.Server = &value
	return b
}

// WithCertificateAuthorityData sets the CertificateAuthorityData field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CertificateAuthorityData field is set to the value of the last call.
func (b *DetailsApplyConfiguration) WithCertificateAuthorityData(value string) *DetailsApplyConfiguration {
	b.CertificateAuthorityData = &value
	return b
}

// WithInsecureSkipTLSVerify sets the InsecureSkipTLSVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipTLSVerify field is set to the value of the last call.
func (b *DetailsApplyConfiguration) WithInsecureSkipTLSVerify(value bool) *DetailsApplyConfiguration {
	b.InsecureSkipTLSVerify = &value
	return b
}
